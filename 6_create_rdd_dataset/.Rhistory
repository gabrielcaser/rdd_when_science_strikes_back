AN_PARA3 = col_character(),
AN_ADENO = col_character(),
AN_OUTRO = col_double(),
DS_AN_OUT = col_character(),
TP_AM_SOR = col_double(),
SOR_OUT = col_character(),
DT_CO_SOR = col_date(format = formato_data),
TP_SOR = col_double(),
OUT_SOR = col_character(),
DT_RES = col_date(format = formato_data),
RES_IGG = col_character(),
RES_IGM = col_character(),
RES_IGA = col_character()
))
head(sivep_2021)
### Merging ----------------------------------------------------------------
sivep_full <- bind_rows(sivep_2020, sivep_2021)
rm(sivep_2020, sivep_2021)
## Garbage collector
gc()
dim(sivep_full)
### Recoding variables ------------------------------------------------------
### based on: https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SRAG/pdfs/dicionario_de_dados_srag_hosp_17_02_2022.pdf
sivep_full <- sivep_full %>%
mutate(CS_SEXO = recode(CS_SEXO,
"F" = "Feminino",
"M" = "Masculino",
"I" = "Ignorado",
.default = NA_character_)) %>%
mutate(CS_SEXO = replace_na(CS_SEXO, "Não preenchido")) %>%
mutate(TP_IDADE = recode(TP_IDADE,
"1" = "Dia",
"2" = "Mês",
"3" = "Ano",
.default = NA_character_)) %>%
mutate(CS_GESTANT = recode(CS_GESTANT,
"1" = "1o trimestre",
"2" = "2o trimestre",
"3" = "3o trimestre",
"4" = "Idade gestacional ignorada",
"5" = "Não",
"6" = "Não se aplica",
"9" = "Ignorado",
"0" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CS_GESTANT = replace_na(CS_GESTANT, "Não preenchido")) %>%
mutate(CS_RACA = recode(CS_RACA,
"1" = "Branca",
"2" = "Preta",
"3" = "Amarela",
"4" = "Parda",
"5" = "Indígena",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CS_RACA = replace_na(CS_RACA, "Não preenchido")) %>%
mutate(CS_ESCOL_N = recode(CS_ESCOL_N,
"0" = "Sem escolaridade/Analfabeto",
"1" = "Fundamental 1o ciclo (1a a 5a série)",
"2" = "Fundamental 2o ciclo (6a a 9a série",
"3" = "Médio (1o ao 3o ano)",
"4" = "Superior",
"5" = "Não se aplica",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CS_ESCOL_N = replace_na(CS_ESCOL_N, "Não preenchido")) %>%
mutate(CS_ZONA = recode(CS_ZONA,
"1" = "Urbana",
"2" = "Rural",
"3" = "Periurbana",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CS_ZONA = replace_na(CS_ZONA, "Não preenchido")) %>%
mutate(HISTO_VGM = recode(HISTO_VGM,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
"0" = "Ignorado",
.default = "Ignorado")) %>%
mutate(SURTO_SG = recode(SURTO_SG,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(NOSOCOMIAL = recode(NOSOCOMIAL,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(NOSOCOMIAL = replace_na(NOSOCOMIAL, "Não preenchido")) %>%
mutate(AVE_SUINO = recode(AVE_SUINO,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(FEBRE = recode(FEBRE,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(TOSSE = recode(TOSSE,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(GARGANTA = recode(GARGANTA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(DISPNEIA = recode(DISPNEIA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(DESC_RESP = recode(DESC_RESP,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(SATURACAO = recode(SATURACAO,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(DIARREIA = recode(DIARREIA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(VOMITO = recode(VOMITO,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(OUTRO_SIN = recode(OUTRO_SIN,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(PUERPERA = recode(PUERPERA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CARDIOPATI = recode(CARDIOPATI,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(HEMATOLOGI = recode(HEMATOLOGI,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(SIND_DOWN = recode(SIND_DOWN,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(HEPATICA = recode(HEPATICA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(ASMA = recode(ASMA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(DIABETES = recode(DIABETES,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(NEUROLOGIC = recode(NEUROLOGIC,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(PNEUMOPATI = recode(PNEUMOPATI,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(IMUNODEPRE = recode(IMUNODEPRE,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(RENAL = recode(RENAL,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(OBESIDADE = recode(OBESIDADE,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(OUT_MORBI = recode(OUT_MORBI,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(VACINA = recode(VACINA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(MAE_VAC = recode(MAE_VAC,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(M_AMAMENTA = recode(M_AMAMENTA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(ANTIVIRAL = recode(ANTIVIRAL,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado")) %>%
mutate(ANTIVIRAL = replace_na(ANTIVIRAL, "Não preenchido")) %>%
mutate(TP_ANTIVIR = recode(TP_ANTIVIR,
"1" = "Oseltamivir",
"2" = "Zanamivir",
"3" = "Outro",
.default = "Ignorado")) %>%
mutate(HOSPITAL = recode(HOSPITAL,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(UTI = recode(UTI,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(SUPORT_VEN = recode(SUPORT_VEN,
"1" = "Sim, invasivo",
"2" = "Sim, não invasivo",
"3" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(RAIOX_RES = recode(RAIOX_RES,
"1" = "Normal",
"2" = "Infiltrado intersticial",
"3" = "Consolidação",
"4" = "Misto",
"5" = "Outro",
"6" = "Não realizado",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(AMOSTRA = recode(AMOSTRA,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(TP_AMOSTRA = recode(TP_AMOSTRA,
"1" = "Secreção de naso-orofaringe",
"2" = "Lavado broco-alveolar",
"3" = "Tecido post mortem",
"4" = "Outra",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(PCR_RESUL = recode(PCR_RESUL,
"1" = "Detectável",
"2" = "Não detectável",
"3" = "Inconclusivo",
"4" = "Não realizado",
"5" = "Aguardando resultado",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(TP_FLU_PCR = recode(TP_FLU_PCR,
"1" = "Influenza A",
"2" = "Influenza B")) %>%
mutate(PCR_FLUASU = recode(PCR_FLUASU,
"1" = "Influenza A (H1N1)",
"2" = "Influenza A (H3N2)",
"3" = "Influenza A (Não subtipado)",
"4" = "Influenza A (Não subtipável)",
"5" = "Inconclusivo",
"6" = "Outro",
.default = "Ignorado")) %>%
mutate(PCR_FLUBLI = recode(PCR_FLUBLI,
"1" = "Victoria",
"2" = "Yamagatha",
"3" = "Não realizado",
"4" = "Inconclusivo",
"5" = "Outro",
.default = "Ignorado")) %>%
mutate(POS_PCROUT = recode(POS_PCROUT,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(CLASSI_FIN = recode(CLASSI_FIN,
"1" = "SRAG por influenza",
"2" = "SRAG por outro vírus respiratório",
"3" = "SRAG por outro agente etiológico",
"4" = "SRAG não especificado",
"5" = "SRAG COVID-19",
.default = "Ignorado")) %>%
mutate(CRITERIO = recode(CRITERIO,
"1" = "Laboratorial",
"2" = "Vínculo epidemiológico",
"3" = "Clínico",
.default = "Ignorado")) %>%
mutate(EVOLUCAO = recode(EVOLUCAO,
"1" = "Cura",
"2" = "Óbito",
"3" = "Óbito por outras causas",
"9" = "Ignorado",
.default = "Ignorado")) %>%
mutate(VACINA_COV = recode(VACINA_COV,
"1" = "Sim",
"2" = "Não",
"9" = "Ignorado")) %>%
mutate(VACINA_COV = replace_na(VACINA_COV, "Não preenchido")) %>%
mutate(PAC_DSCBO = replace_na(PAC_DSCBO, "Não preenchido")) %>%
mutate(ID_UNIDADE = replace_na(ID_UNIDADE, "Unidade não informada")) %>%
mutate(EVOLUCAO = replace_na(EVOLUCAO, "Em andamento")) %>%
mutate(idade = if_else(TP_IDADE == "Ano", NU_IDADE_N, 0)) %>%
mutate(fx_etaria = cut(idade,
breaks = c(-Inf, 2, 4, 9, 19, 29, 39, 49, 59, +Inf),
labels = c("< 2 anos", "2-4 anos", "5-9 anos", "10-19 anos", "20-29 anos", "30-39 anos", "40-49 anos", "50-59 anos", "60+ anos")
)
) %>%
select(-idade)
### Cleaning ----------------------------------------------------------------
length(unique(sivep_full$ID_MN_RESI)) # 200 municipalities missing.
length(unique(sivep_full$CO_MUN_RES))
### Creating Outcome Variables ----------------------------------------------
sivep_2020 <- sivep_full %>%
filter((CLASSI_FIN == "SRAG COVID-19" | CLASSI_FIN == "SRAG não especificado") & DT_SIN_PRI >= "2020-02-01" & DT_SIN_PRI <= "2020-11-30") %>%
group_by(CO_MUN_RES) %>%
summarise(deaths = sum(EVOLUCAO == "Óbito", na.rm = TRUE),
hosp = sum(HOSPITAL == "Sim", na.rm = TRUE),
coorte = 2016) %>%
arrange(desc(deaths))
sivep_2021 <- sivep_full %>%
filter((CLASSI_FIN == "SRAG COVID-19") & DT_SIN_PRI >= "2021-02-01" & DT_SIN_PRI <= "2021-12-31") %>%
group_by(CO_MUN_RES) %>%
summarise(deaths = sum(EVOLUCAO == "Óbito", na.rm = TRUE),
hosp = sum(HOSPITAL == "Sim", na.rm = TRUE),
coorte = 2020) %>%
arrange(desc(deaths))
sivep <- bind_rows(sivep_2020, sivep_2021) # joining coortes
rm(sivep_2020, sivep_2021)
sivep <- sivep %>%
rename(id_municipio = CO_MUN_RES)
sivep <- sivep %>%
rename(deaths_sivep = deaths, hosp_sivep = hosp)
sivep <- sivep %>% # changing data type
mutate(id_municipio = as.character(id_municipio))
sivep <- sivep %>% # creating delta outcomes
group_by(id_municipio) %>%
arrange(coorte) %>%
mutate(delta_deaths_sivep = deaths_sivep - lag(deaths_sivep, n = 1, default = NA),
delta_hosp_sivep = hosp_sivep - lag(hosp_sivep, n = 1, default = NA)) %>%
arrange(desc(coorte))
# Merging with population data
df_population <- read.csv2(paste0(work_dir, "/input/populacao.csv"), sep = ",") # source: https://iepsdata.org.br/data-downloads
## merging year of population with coorte
df_population <- df_population %>%
mutate(coorte = recode(ano, '2020' = '2016', '2021' = '2020')) %>%
summarise(coorte = as.double(coorte), populacao, id_municipio = as.character(id_municipio))
sivep <- sivep %>%
ungroup()
sivep <- left_join(sivep, df_population, by = c("id_municipio", "coorte"))
# Creating outcome variables
sivep <- sivep %>%
dplyr::group_by(id_municipio, coorte) %>%
dplyr::mutate(hosp_per_100k_inhabitants = (hosp_sivep / populacao) * 100000,
deaths_sivep_per_100k_inhabitants = (deaths_sivep / populacao) * 100000) %>%
ungroup()
# Saving
rm(sivep_full)
saveRDS(sivep, paste0(output_dir, "/data/covid_data.rds"))
# Program - This program merges all data to create the rdd dataset
# TO DO -------------------------------------------------------------------
# Initial commands
rm(list = ls(all.names = TRUE)) # clear objects
gc() # free up memory
# Libs --------------------------------------------------------------------
library(tidyverse)
library(skimr)
library(readxl)
# Directories
work_dir                   = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset"
output_dir                 = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
baseline_data_dir          = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/5_create_baseline_data/output/data"
covid_data_dir             = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/4_create_covid_data/output/data"
mayors_data_dir            = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output/data"
set.seed(1234) # making it reproducible
# Mayors Data ----------------------------------------------------
df_mayors <- readRDS(paste0(mayors_data_dir, "/candidates_dataset.Rds"))
df_mayors$id_municipio <- as.character(df_mayors$id_municipio) # changing data type
df_mayors$id_municipio <- substr(df_mayors$id_municipio,1,6) # keeping only 6 first digits
# Identify factor columns
factor_columns <- sapply(df_mayors, is.factor)
# Convert factor columns to character
df_mayors[factor_columns] <- lapply(df_mayors[factor_columns], as.character)
## Choosing the definition of STEM background (treatment) -----------------------------------------
df_mayors <- df_mayors %>%
mutate(stem_background = as.numeric((stem_job == 1 & curso_stem == 1)),
dif_votos_segundo = dif_votos_2_lugar,
dif_votos_terceiro = dif_votos_3_lugar) # 616 candidates with stem background
## Turn into wide format
df_mayors$resultado <- ifelse(df_mayors$x2_lugar == 'True', 'segundo', df_mayors$resultado) # there is 1 second place more than elected
df_mayors$resultado <- ifelse(df_mayors$x3_lugar == 'True', 'terceiro', df_mayors$resultado)
## removing municipalities with more than one 2 or 3 place (I need to investigate why this is happening. Probably they achieved the same number of votes)
df_mayors <- df_mayors %>%
filter(id_municipio != '311920' & id_municipio != '410380')
df_mayors <- pivot_wider(df_mayors, id_cols = c('id_municipio', 'coorte', 'dif_votos_segundo', 'dif_votos_terceiro'), names_from =  'resultado', values_from = c('stem_background','tenure', 'hours', 'tenure_rais', 'cbo_2002', 'cbo_agregado', 'sigla_partido', 'instrucao', 'ocupacao', 'genero', 'raca', 'idade', 'stem_job', 'curso_stem') )
## Keeping only municipalities where at least 1 candidate has a STEM background
df_mayors <- df_mayors %>%
group_by(id_municipio, coorte) %>%
mutate(n_stem_background = sum(stem_background_eleito, stem_background_segundo, stem_background_terceiro, na.rm = TRUE)) %>%
ungroup()
df_mayors <- df_mayors %>%
filter(n_stem_background >= 1)
## Defining cities to use third most voted candidate
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito != 1 & df_mayors$stem_background_segundo != 1 & df_mayors$stem_background_terceiro == 1, 1, 0)
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito == 1 & df_mayors$stem_background_segundo == 1 & df_mayors$stem_background_terceiro != 1, 1, df_mayors$use_third)
## Replace values in variables ending with "_segundo" if use_third == 1
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
# Get a list of variable names ending with "_segundo"
segundo_columns <- colnames(df_mayors)[endsWith(colnames(df_mayors), "_segundo")]
# Iterate through the "_segundo" columns and replace values based on the condition
for (col_name in segundo_columns) {
df_mayors[[col_name]] <- ifelse(df_mayors$use_third != 1, df_mayors[[col_name]],
df_mayors[[sub("_segundo", "_terceiro", col_name)]])
}
# Iterate through the "_segundo" columns and replace their names
for (col_name in segundo_columns) {
new_col_name <- sub("_segundo", "_naoeleito", col_name)
df_mayors <- df_mayors %>%
rename(!!new_col_name := !!col_name)
}
# Drop variables ending with "_terceiro"
df_mayors <- df_mayors %>%
select(-ends_with("_terceiro"))
# renaming variable
df_mayors <- df_mayors %>%
rename(dif_votos = dif_votos_naoeleito)
# droping variables
df_mayors <- df_mayors %>%
select(-use_third, -n_stem_background)
# changing data type
df_mayors$stem_background_eleito <- as.factor(df_mayors$stem_background_eleito)
# droping municipalities where 1 and 2 were STEM and had no 3 candidate
df_mayors <- df_mayors %>%
filter(!is.na(dif_votos))
# Baseline and NPI Data -----------------------------------------------------------
df_health <- readRDS(paste0(baseline_data_dir, "/health_data.Rds"))
df_ideology <- readRDS(paste0(baseline_data_dir, "/ideology_data.Rds"))
df_ideology <- df_ideology %>%
filter(coorte == 2016 | coorte == 2020) # keeping election coorte years
df_density <- readRDS(paste0(baseline_data_dir, "/density_data.Rds"))
df_political <- readRDS(paste0(baseline_data_dir, "/political_data.Rds"))
df_npi <- readRDS(paste0(baseline_data_dir, "/npi_data.Rds"))
# Covid Data --------------------------------------------------------------
df_covid <- readRDS(paste0(covid_data_dir, "/covid_data.Rds"))
df_covid <- df_covid %>%
ungroup()
# Merging datasets --------------------------------------------------------
df <- left_join(df_mayors, df_npi, by = c("id_municipio")) # 29% of municipalities with missing data. That is expected since not everyone responded the survey
df <- left_join(df, df_covid, by = c("id_municipio", "coorte")) # 4 municipalities with missing data
df <- left_join(df, df_health, by = c("id_municipio"))
df <- left_join(df, df_density, by = c("id_municipio")) # 2 municipalities with missing data
df <- left_join(df, df_ideology, by = c("id_municipio", "coorte"))
df <- df %>%
rename(sigla_partido = sigla_partido_eleito)
df <- left_join(df, df_political, by = c("sigla_partido", "coorte"))
df <- df %>%
rename(sigla_partido_eleito = sigla_partido,
ideology_party_eleito = ideology_party)
df <- df %>%
rename(sigla_partido = sigla_partido_naoeleito)
df <- left_join(df, df_political, by = c("sigla_partido", "coorte"))
df <- df %>%
rename(sigla_partido_naoeleito = sigla_partido,
ideology_party_naoeleito = ideology_party)
df$coorte <- as.factor(df$coorte)
rm(df_covid, df_density, df_health, df_ideology, df_mayors, df_npi, df_political) # removing dataset
### Creating "variable" of non_stem_candidate
df$he_non_stem_cdt = ifelse(df$stem_background_eleito == 1 & str_detect(df$instrucao_naoeleito, "ensino superior completo"), 1, 0)
df$he_non_stem_cdt = ifelse(df$stem_background_naoeleito == 1 & str_detect(df$instrucao_eleito, "ensino superior completo"), 1, df$he_non_stem_cdt)
df$sch_non_stem_cdt <= as.factor(df$he_non_stem_cdt)
### Dropping non-elected variables
# Drop variables ending with "_terceiro"
df <- df %>%
select(-ends_with("_naoeleito"))
# Changing variable names
# Get a list of variable names ending with "_eleito"
eleito_columns <- colnames(df)[endsWith(colnames(df), "_eleito")]
# Iterate through the "_eleito" columns and replace their names
for (col_name in eleito_columns) {
new_col_name <- sub("_eleito", "", col_name)
df <- df %>%
rename(!!new_col_name := !!col_name)
}
skim(df)
skim(df)
skim(df)
View(df)
df <- df %>%
filter(!is.na(hosp_per_100k_inhabitants) | !is.na(deaths_sivep_per_100k_inhabitants))
skim(df)
