# This program creates sum stats
# Initial commands
rm(list = ls(all.names = TRUE)) # clear objects
gc() # free up memory
# Libraries ---------------------------------------------------------------
library("estimatr")
library("tidyverse")
# Setting -----------------------------------------------------------------
work_dir                       = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/sum_stats"
output_dir                     = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/sum_stats/output"
create_dataset_for_regressions = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
# Oppening ----------------------------------------------------------------
df <- readRDS(paste(create_dataset_for_regressions,"/data/rdd_data_main.rds", sep = ""))
glimpse(df)
dat <- df[ c("stem_background",
"tenure",
"X",
"mulher",
"idade",
"instrucao",
"reeleito",
"ideology_party",
"populacao",
"densidade",
#"taxa_analfabetismo_18_mais",
#"indice_gini",
"idhm",
"renda_pc",
"per_populacao_urbana",
"per_populacao_homens",
"tx_med",
"pct_desp_recp_saude_mun",
"cob_esf",
"tx_leito_sus",
"ideology_municipality",
"Y_deaths_sivep",
"Y_hosp",
#"Y_cases",
"barreiras_sanitarias",
"mascaras",
"restricao_atv_nao_essenciais",
"restricao_circulacao",
"restricao_transporte_publico",
"total_nfi")]
dat <- dat %>%
summarise(tenure_stem_job = tenure,
#physician = as.numeric(medico),
female = as.numeric(mulher),
age = idade,
education = instrucao,
incumbent_when_elected = as.numeric(reeleito),
party_ideology = ideology_party,
stem_win_margin = X,
deaths_per_100k = Y_deaths_sivep,
hospitalizations_per_100k = Y_hosp,
#cases_per_100k = Y_cases,
cordon_sanitaire = barreiras_sanitarias,
face_covering_required = mascaras,
closure_of_non_essential = restricao_atv_nao_essenciais,
gathering_prohibition = restricao_circulacao,
public_transport_restriction = restricao_transporte_publico,
number_of_npi = total_nfi,
population_2010 = populacao,
#illiteracy_rate = taxa_analfabetismo_18_mais,
#gini = indice_gini,
hdi = idhm,
pc_income = renda_pc,
density = densidade,
urban_pop_rate = per_populacao_urbana,
men_pop_rate = per_populacao_homens,
physician_per_1k = tx_med,
health_municipal_spending_rate = pct_desp_recp_saude_mun,
community_health_agency_rate = cob_esf,
hosp_beds_per_100k_pop = tx_leito_sus,
stem_background)
tab <- datasummary(All(data.frame(dat)) ~ N  + Min + Mean + Max + SD, data = dat, fmt = 2)
library("modelsummary")
tab <- datasummary(All(data.frame(dat)) ~ N  + Min + Mean + Max + SD, data = dat, fmt = 2)
tab
datasummary(All(data.frame(dat)) ~ N  + Min + Mean + Max + SD, data = dat, fmt = 2, output = "Dados/output/230224_table_sum_stats.tex")
datasummary(All(data.frame(dat)) ~ N  + Min + Mean + Max + SD, data = dat, fmt = 2, output = paste0(output_dir, "/figures/table_sum_stats.tex"))
datasummary_balance( ~ stem_job, dinm_statistic = "p.value", data = dat, fmt = 2)
datasummary_balance( ~ stem_job, dinm_statistic = "p.value", data = dat, fmt = 2)
datasummary_balance( ~ stem_background, dinm_statistic = "p.value", data = dat, fmt = 2)
datasummary_balance( ~ stem_background, dinm_statistic = "p.value", data = dat, fmt = 2, output = paste0(output_dir, "/figures/table_sum_stats_groups.tex"))
profi2 <- df %>%
group_by(coorte) %>%
dplyr::summarise(per_stem_candidates_elected = (sum(stem_background == 1)), #/ sum(stem_job != 99)) * 100,
total_stem_candidates = (sum(stem_background == 1)))
q <- ggplot(profi2, aes(x = as.character(coorte), y = per_stem_candidates_elected)) +
geom_bar(stat = "identity") +
# theme_minimal() +
#ggtitle("Number of elected STEM candidates") +
xlab("cohort") +
ylab("")
q
#ggsave("Dados/output/221201_barplot_stem_candidates.png", q,
#       width = 5.50,
#       height = 5.00,
#       units = "in")
profi <- df %>%
filter(stem_background == 1) %>%
group_by(coorte, cbo_agregado_nome) %>%
dplyr::summarise(number = n()) %>%
ungroup() %>%
group_by(coorte) %>%
slice_max(order_by = number, n = 10) %>%
arrange(desc(number))
p <- ggplot(profi, aes(x = as.character(coorte), y = number, fill = as.character(cbo_agregado_nome))) +
geom_bar(pattern = "occupation", color = "black", stat = "identity") +
theme_minimal(base_size = 16) +
#theme_bw() +
#ggtitle("STEM mayors' occupations") +
xlab("cohort") +
ylab("number of STEM mayors")
p <- p + scale_fill_discrete(name = "occuppation")
p
states <- df2 %>%
filter(coorte == 2016) %>%
group_by(state, coorte) %>%
dplyr::summarise(perc_stem = sum(stem_background == 1, na.rm = TRUE) / sum(stem_background == 1 | stem_background == 0, na.rm = TRUE)) %>%
arrange(desc(perc_stem))
states <- df %>%
filter(coorte == 2016) %>%
group_by(state, coorte) %>%
dplyr::summarise(perc_stem = sum(stem_background == 1, na.rm = TRUE) / sum(stem_background == 1 | stem_background == 0, na.rm = TRUE)) %>%
arrange(desc(perc_stem))
states <- df1 %>%
filter(coorte == 2016) %>%
group_by(sigla_uf, coorte) %>%
dplyr::summarise(perc_stem = sum(stem_background == 1, na.rm = TRUE) / sum(stem_background == 1 | stem_background == 0, na.rm = TRUE)) %>%
arrange(desc(perc_stem))
states <- df %>%
filter(coorte == 2016) %>%
group_by(sigla_uf, coorte) %>%
dplyr::summarise(perc_stem = sum(stem_background == 1, na.rm = TRUE) / sum(stem_background == 1 | stem_background == 0, na.rm = TRUE)) %>%
arrange(desc(perc_stem))
box2 <- ggplot(states, aes(y = perc_stem * 100, group = coorte, x = as.character(coorte))) +
geom_boxplot() +
#theme_minimal() +
xlab("cohort") +
ylab("% of STEM mayors")
box2
View(states)
library('geobr')
dados_mapa <- read_state(year=2019, showProgress = FALSE, simplified = FALSE)
sf2 <- states %>%
filter(coorte == 2016)
sf2 <- sf2 %>%
rename(sigla_uf = state)
dados_mapa <- dados_mapa %>%
rename(sigla_uf = abbrev_state)
sf2 <- left_join(dados_mapa, sf2, by = c("sigla_uf"))
dim(df)
sf2$perc_stem = sf2$perc_stem * 100
sf2 %>%
filter(sigla_uf != "AC") %>%
ggplot() +
geom_sf(aes(fill = perc_stem), alpha = 0.9, color = NA) +
labs(#title="Percentage of STEM mayors per state (2016)",
caption='Source: Author', size = 8) +
viridis::scale_fill_viridis(
direction = 1,
name="% of STEM mayors",
na.value = "white"
) +
theme_minimal(base_size = 16) +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
mun <- read_municipality(year=2015, showProgress = FALSE, simplified = FALSE)
mun <- mun %>%
rename(id_municipio = code_muni)
mun$id_municipio = substr(mun$id_municipio,1,6)
sf3 <- df %>%
filter(coorte == 2016)
sf3 <- left_join(mun, sf3, by = c("id_municipio"))
sf3 %>%
#filter(code_region == 3) %>%  # para ver o mapa inteiro é só tirar o code_region
# filter(sigla_uf != "AC") %>%
ggplot() +
geom_sf(data = subset(dados_mapa)) +
geom_sf(aes(fill = stem_background), alpha = .7, color = NA) +
labs(#title="Municipalities where a STEM canditate was among the top 2 voted (2016)",
caption='Source: Author', size = 8) +
scale_fill_manual(values = c("red", "blue"),
name = "STEM candidate",
na.value = "grey90",
labels = c("Lost","Won", "Not in top 2")) +
theme_minimal(base_size = 16) +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
