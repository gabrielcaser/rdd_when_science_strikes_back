output_dir                     = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/regressions_main/output"
create_dataset_for_regressions = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
# Oppening Covid and RDD Data ----------------------------------------------------
df <- readRDS(paste(create_dataset_for_regressions, "/data/rdd_data_main.rds", sep = ""))
# Creating functions -----------------------------------
## table of results
tidy.rdrobust <- function(model, ...) {
ret <- data.frame(
term = row.names(model$coef),
estimate = model$coef[3, 1],
std.error = model$se[3, 1],
p.value = model$pv[, 1],
conf.low = model$ci[3,1],
conf.high = model$ci[3,2])
row.names(ret) <- NULL
ret
}
glance.rdrobust <- function(model, ...) {
ret <- data.frame(
"Eff number obs." = as.character(model$N_h[1] + model$N_h[2]),
"Bandwidth" = as.character(round(model$bws[1,1] * 100, 2)),
"State FE" = "PREENCHER",
"Election FE" = "PREENCHER",
"Gender" = "PREENCHER"
)
ret
}
## table of robustness
robust_check <- function(outcome, poli, covsZ, k) {
df_robs <- data.frame()
for (i in seq(0.02, 0.2, by = 0.01)) {
prov = rdrobust(y = outcome, df$X, p = poli, level = 90, kernel = k, h = i, covs = covsZ) #rodando rdd
df_robs = rbind(df_robs, c(i, prov[["coef"]][1], prov[["coef"]][3], prov[["ci"]][3,1], prov[["ci"]][3,2], prov[["ci"]][1,1], prov[["ci"]][1,2], prov[["z"]][3], prov[["N_h"]][1] + prov[["N_h"]][2])) #salvando colunas
}
colnames(df_robs) <- c("bw", "coef_conv", "coef_robs", "ci_lower_rob", "ci_higher_rob",  "ci_lower_conv", "ci_higher_conv", "z", "eff_n")
return(df_robs)
}
# Creating state dummies for fixed effects --------------------------------
state.f = factor(df$sigla_uf)
state.d = model.matrix(~state.f+0)
#year.f = factor(df$coorte)
#year.d = model.matrix(~year.f+0)
# Defining regressions' parameters
#amostra <- cbind(df$coorte == 2016, df$sch_non_stem_cdt == 1, df$ens_sup == 1)
# Main Results -------------------------------------------------------------
# baseline
amostra = cbind()
covsZ = cbind(state.d)
poli = 1
janela = cbind()
k = "triangular"
#rdrobust(df$taxa_analfabetismo_18_mais, df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
#taxa_analfabetismo_18_mais <- rdrobust(df$taxa_analfabetismo_18_mais, df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
#indice_gini <- rdrobust(df$indice_gini,  df$X, p = poli, kernel = k, h = janela, subset = amostra, covs = covsZ)
renda_pc <- rdrobust(df$renda_pc,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
populacao <- rdrobust(df$populacao,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
idhm <- rdrobust(df$idhm,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
densidade <- rdrobust(df$densidade,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
per_populacao_homens <- rdrobust(df$per_populacao_homens,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
pct_desp_recp_saude_mun <- rdrobust(df$pct_desp_recp_saude_mun,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
tx_med_ch <- rdrobust(df$tx_med_ch, df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
cob_esf <- rdrobust(df$cob_esf,  df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
tx_leito_sus <- rdrobust(df$tx_leito_sus, df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
ideology_municipality <- rdrobust(df$ideology_municipality, df$X, p = poli, kernel = k, h = janela, bwselect = "mserd", subset = amostra, covs = covsZ)
models <- list(
# "Gini" = indice_gini,
"PC income" = renda_pc,
"Density" = densidade,
#"Illiteracy" = taxa_analfabetismo_18_mais,
"HDI" = idhm,
"Ln Density" = densidade,
"% Masc. Pop" = per_populacao_homens,
"% Health municipal spending" = pct_desp_recp_saude_mun,
"Doctors per 1k pop." = tx_med_ch,
"Community health agents program " = cob_esf,
"Hosp. beds per 100k pop." = tx_leito_sus,
"Mun. ideology index" = ideology_municipality)
baseline_table <- modelsummary(models,
estimate = "{estimate}",
statistic = c("[{std.error}]","{p.value}{stars}"
),
coef_rename = c("Robust" = "RD estimator"),
stars = c('*'=.1, '**'=.05, '***'=.01),
fmt = 2, # decimal places
#output = "Dados/output/bigsample_baseline.tex",
output = "gt",
title = "Baseline Characteristis - RD estimates",
coef_omit = "Corrected|Conventional")%>%
tab_spanner(label = "Demography", columns = 2:6) %>%
tab_spanner(label = "Health", columns = 7:10) %>%
tab_spanner(label = "Ideology", columns = 11)
baseline_table
source("C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/create_dataset_main.R", echo=TRUE)
# Program - This program merges all data to create the rdd dataset
# TO DO -------------------------------------------------------------------
# Initial commands
rm(list = ls(all.names = TRUE)) # clear objects
gc() # free up memory
# Libs --------------------------------------------------------------------
library(tidyverse)
library(skimr)
library(readxl)
# Directories
work_dir                   = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset"
output_dir                 = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
baseline_data_dir          = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/5_create_baseline_data/output/data"
covid_data_dir             = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/4_create_covid_data/output/data"
mayors_data_dir            = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output/data"
set.seed(1234) # making it reproducible
# Mayors Data ----------------------------------------------------
df_mayors <- readRDS(paste0(mayors_data_dir, "/candidates_dataset.Rds"))
df_mayors$id_municipio <- as.character(df_mayors$id_municipio) # changing data type
df_mayors$id_municipio <- substr(df_mayors$id_municipio,1,6) # keeping only 6 first digits
# Identify factor columns
factor_columns <- sapply(df_mayors, is.factor)
# Convert factor columns to character
df_mayors[factor_columns] <- lapply(df_mayors[factor_columns], as.character)
## Choosing the definition of STEM background (treatment) -----------------------------------------
df_mayors <- df_mayors %>%
mutate(stem_background = as.numeric((stem_job == 1 & curso_stem == 1)),
dif_votos_segundo = dif_votos_2_lugar,
dif_votos_terceiro = dif_votos_3_lugar) # 616 candidates with stem background
## Turn into wide format
df_mayors$resultado <- ifelse(df_mayors$x2_lugar == 'True', 'segundo', df_mayors$resultado) # there is 1 second place more than elected
df_mayors$resultado <- ifelse(df_mayors$x3_lugar == 'True', 'terceiro', df_mayors$resultado)
## removing municipalities with more than one 2 or 3 place (I need to investigate why this is happening. Probably they achieved the same number of votes)
df_mayors <- df_mayors %>%
filter(id_municipio != '311920' & id_municipio != '410380')
df_mayors <- pivot_wider(df_mayors, id_cols = c('id_municipio', 'coorte', 'dif_votos_segundo', 'dif_votos_terceiro'), names_from =  'resultado', values_from = c('stem_background','tenure', 'hours', 'tenure_rais', 'cbo_2002', 'cbo_agregado', 'sigla_partido', 'instrucao', 'ocupacao', 'genero', 'raca', 'idade', 'stem_job', 'curso_stem') )
## Keeping only municipalities where at least 1 candidate has a STEM background
df_mayors <- df_mayors %>%
group_by(id_municipio, coorte) %>%
mutate(n_stem_background = sum(stem_background_eleito, stem_background_segundo, stem_background_terceiro, na.rm = TRUE)) %>%
ungroup()
df_mayors <- df_mayors %>%
filter(n_stem_background >= 1)
## Defining cities to use third most voted candidate
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito != 1 & df_mayors$stem_background_segundo != 1 & df_mayors$stem_background_terceiro == 1, 1, 0)
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito == 1 & df_mayors$stem_background_segundo == 1 & df_mayors$stem_background_terceiro != 1, 1, df_mayors$use_third)
## Replace values in variables ending with "_segundo" if use_third == 1
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
# Get a list of variable names ending with "_segundo"
segundo_columns <- colnames(df_mayors)[endsWith(colnames(df_mayors), "_segundo")]
# Iterate through the "_segundo" columns and replace values based on the condition
for (col_name in segundo_columns) {
df_mayors[[col_name]] <- ifelse(df_mayors$use_third != 1, df_mayors[[col_name]],
df_mayors[[sub("_segundo", "_terceiro", col_name)]])
}
# Iterate through the "_segundo" columns and replace their names
for (col_name in segundo_columns) {
new_col_name <- sub("_segundo", "_naoeleito", col_name)
df_mayors <- df_mayors %>%
rename(!!new_col_name := !!col_name)
}
# Program - This program merges all data to create the rdd dataset
# TO DO -------------------------------------------------------------------
# Initial commands
rm(list = ls(all.names = TRUE)) # clear objects
gc() # free up memory
# Libs --------------------------------------------------------------------
library(tidyverse)
library(skimr)
library(readxl)
# Directories
work_dir                   = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset"
output_dir                 = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
baseline_data_dir          = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/5_create_baseline_data/output/data"
covid_data_dir             = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/4_create_covid_data/output/data"
mayors_data_dir            = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output/data"
set.seed(1234) # making it reproducible
# Mayors Data ----------------------------------------------------
df_mayors <- readRDS(paste0(mayors_data_dir, "/candidates_dataset.Rds"))
df_mayors$id_municipio <- as.character(df_mayors$id_municipio) # changing data type
df_mayors$id_municipio <- substr(df_mayors$id_municipio,1,6) # keeping only 6 first digits
# Identify factor columns
factor_columns <- sapply(df_mayors, is.factor)
# Convert factor columns to character
df_mayors[factor_columns] <- lapply(df_mayors[factor_columns], as.character)
## Choosing the definition of STEM background (treatment) -----------------------------------------
df_mayors <- df_mayors %>%
mutate(stem_background = as.numeric((stem_job == 1 & curso_stem == 1)),
dif_votos_segundo = dif_votos_2_lugar,
dif_votos_terceiro = dif_votos_3_lugar) # 616 candidates with stem background
## Turn into wide format
df_mayors$resultado <- ifelse(df_mayors$x2_lugar == 'True', 'segundo', df_mayors$resultado) # there is 1 second place more than elected
df_mayors$resultado <- ifelse(df_mayors$x3_lugar == 'True', 'terceiro', df_mayors$resultado)
## removing municipalities with more than one 2 or 3 place (I need to investigate why this is happening. Probably they achieved the same number of votes)
df_mayors <- df_mayors %>%
filter(id_municipio != '311920' & id_municipio != '410380')
df_mayors <- pivot_wider(df_mayors, id_cols = c('id_municipio', 'coorte', 'dif_votos_segundo', 'dif_votos_terceiro'), names_from =  'resultado', values_from = c('stem_background','tenure', 'hours', 'tenure_rais', 'cbo_2002', 'cbo_agregado', 'sigla_partido', 'instrucao', 'ocupacao', 'genero', 'raca', 'idade', 'stem_job', 'curso_stem') )
## Keeping only municipalities where at least 1 candidate has a STEM background
df_mayors <- df_mayors %>%
group_by(id_municipio, coorte) %>%
mutate(n_stem_background = sum(stem_background_eleito, stem_background_segundo, stem_background_terceiro, na.rm = TRUE)) %>%
ungroup()
df_mayors <- df_mayors %>%
filter(n_stem_background >= 1)
## Defining cities to use third most voted candidate
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito != 1 & df_mayors$stem_background_segundo != 1 & df_mayors$stem_background_terceiro == 1, 1, 0)
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito == 1 & df_mayors$stem_background_segundo == 1 & df_mayors$stem_background_terceiro != 1, 1, df_mayors$use_third)
## Replace values in variables ending with "_segundo" if use_third == 1
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
# Get a list of variable names ending with "_segundo"
segundo_columns <- colnames(df_mayors)[endsWith(colnames(df_mayors), "_segundo")]
# Iterate through the "_segundo" columns and replace values based on the condition
for (col_name in segundo_columns) {
df_mayors[[col_name]] <- ifelse(df_mayors$use_third != 1, df_mayors[[col_name]],
df_mayors[[sub("_segundo", "_terceiro", col_name)]])
}
# Iterate through the "_segundo" columns and replace their names
for (col_name in segundo_columns) {
new_col_name <- sub("_segundo", "_naoeleito", col_name)
df_mayors <- df_mayors %>%
rename(!!new_col_name := !!col_name)
}
# Iterate through the "_segundo" columns and replace their names
for (col_name in segundo_columns) {
new_col_name <- sub("_segundo", "_naoeleito", col_name)
df_mayors <- df_mayors %>%
rename(!!new_col_name = !!col_name)
# TO DO -------------------------------------------------------------------
# Initial commands
rm(list = ls(all.names = TRUE)) # clear objects
gc() # free up memory
# Libs --------------------------------------------------------------------
library(tidyverse)
library(skimr)
library(readxl)
# Directories
work_dir                   = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset"
output_dir                 = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/6_create_rdd_dataset/output"
baseline_data_dir          = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/5_create_baseline_data/output/data"
covid_data_dir             = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/4_create_covid_data/output/data"
mayors_data_dir            = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output/data"
set.seed(1234) # making it reproducible
# Mayors Data ----------------------------------------------------
df_mayors <- readRDS(paste0(mayors_data_dir, "/candidates_dataset.Rds"))
df_mayors$id_municipio <- as.character(df_mayors$id_municipio) # changing data type
df_mayors$id_municipio <- substr(df_mayors$id_municipio,1,6) # keeping only 6 first digits
# Identify factor columns
factor_columns <- sapply(df_mayors, is.factor)
# Convert factor columns to character
df_mayors[factor_columns] <- lapply(df_mayors[factor_columns], as.character)
## Choosing the definition of STEM background (treatment) -----------------------------------------
df_mayors <- df_mayors %>%
mutate(stem_background = as.numeric((stem_job == 1 & curso_stem == 1)),
dif_votos_segundo = dif_votos_2_lugar,
dif_votos_terceiro = dif_votos_3_lugar) # 616 candidates with stem background
## Turn into wide format
df_mayors$resultado <- ifelse(df_mayors$x2_lugar == 'True', 'segundo', df_mayors$resultado) # there is 1 second place more than elected
df_mayors$resultado <- ifelse(df_mayors$x3_lugar == 'True', 'terceiro', df_mayors$resultado)
## removing municipalities with more than one 2 or 3 place (I need to investigate why this is happening. Probably they achieved the same number of votes)
df_mayors <- df_mayors %>%
filter(id_municipio != '311920' & id_municipio != '410380')
df_mayors <- pivot_wider(df_mayors, id_cols = c('id_municipio', 'coorte', 'dif_votos_segundo', 'dif_votos_terceiro'), names_from =  'resultado', values_from = c('stem_background','tenure', 'hours', 'tenure_rais', 'cbo_2002', 'cbo_agregado', 'sigla_partido', 'instrucao', 'ocupacao', 'genero', 'raca', 'idade', 'stem_job', 'curso_stem') )
## Keeping only municipalities where at least 1 candidate has a STEM background
df_mayors <- df_mayors %>%
group_by(id_municipio, coorte) %>%
mutate(n_stem_background = sum(stem_background_eleito, stem_background_segundo, stem_background_terceiro, na.rm = TRUE)) %>%
ungroup()
df_mayors <- df_mayors %>%
filter(n_stem_background >= 1)
## Defining cities to use third most voted candidate
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito != 1 & df_mayors$stem_background_segundo != 1 & df_mayors$stem_background_terceiro == 1, 1, 0)
df_mayors$use_third <- ifelse(df_mayors$stem_background_eleito == 1 & df_mayors$stem_background_segundo == 1 & df_mayors$stem_background_terceiro != 1, 1, df_mayors$use_third)
## Replace values in variables ending with "_segundo" if use_third == 1
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
#df_mayors$stem_background_naoeleito <- ifelse(df_mayors$use_third != 1, df_mayors$stem_background_segundo, df_mayors$stem_background_terceiro)
# Get a list of variable names ending with "_segundo"
segundo_columns <- colnames(df_mayors)[endsWith(colnames(df_mayors), "_segundo")]
# Iterate through the "_segundo" columns and replace values based on the condition
for (col_name in segundo_columns) {
df_mayors[[col_name]] <- ifelse(df_mayors$use_third != 1, df_mayors[[col_name]],
df_mayors[[sub("_segundo", "_terceiro", col_name)]])
}
# Iterate through the "_segundo" columns and replace their names
for (col_name in segundo_columns) {
new_col_name <- sub("_segundo", "_naoeleito", col_name)
df_mayors <- df_mayors %>%
rename(!!new_col_name := !!col_name)
}
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data"
output_dir                = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/1_create_electoral_data/output/data"
set.seed(1235) # making it reproducible
# Data --------------------------------------------------------------------
df <- readRDS(paste0(output_dir, "/data/230829_masked_ml_dataset_stem.Rds"))
df_nonstem <- readRDS(paste0(output_dir, "/data/230829_masked_ml_dataset_non_stem.Rds"))
# Removing cbo_agregado_ dummies
## Create a vector of variable names to remove
variables_to_remove <- grep("cbo_agregado_", names(df), value = TRUE)
## Remove the selected variables from the data frame
df <- df[, !(names(df) %in% variables_to_remove)]
## Creating aggregated data
df <- df %>%
mutate(cbo_2_digits = as.factor(substring(cbo_2002, 0,2)))
## Creating dummy columns for categorical variables (useful for running the algorithms)
df <- dummy_cols(df, select_columns = c("raca","id_municipio"))
## Fixing datatype
df$id_municipio <- as.factor(df$id_municipio)
## Removing candidates with missing educational background and creating copy with all candidates
df_all_candidates <- df
df <- df %>%
filter(!is.na(graduacao_stem))
# Creating Train / Test datasets ------------------------------------------------------
idx <- sample(1:nrow(df), size = round(0.7 * nrow(df)))
training <- df[idx, ] # used to train the classifier
test <- df[-idx, ] # used to apply the classifier
# Variables to not use
excluded_variables <- c("id_masked",
"resultado",
"ano",
"cbo_2002",
"id_municipio",
"instrucao",
"ocupacao",
"sigla_partido",
"state",
"cbo_agregado",
"cbo_2002",
"raca",
"cbo_2_digits",
"graduacao",
'X2_lugar',
'X3_lugar',
'n_stem_candidates',
'stem_job',
'dif_votos_3_lugar',
'dif_votos_2_lugar'
)
# Logistic Regression -----------------------------------------------------
logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,!(names(training)) %in% excluded_variables],  na.action = na.exclude) # It excludes the mentioned columns
summary(logreg)
prob_logreg <- predict(logreg, newdata = test[,!(names(test)) %in% excluded_variables], type = "response") # it now uses the trained model 'logreg' to estimate the values in the test dataset
## optimal threshold
plot.roc(test$graduacao_stem, prob_logreg,
print.thres = "best")
my_roc <- roc(test$graduacao_stem, prob_logreg)
best_threshold <- as.numeric(coords(my_roc,"best", ret = "threshold" ))
y_hat_logreg <- factor(ifelse(prob_logreg >= best_threshold, "Yes", "No"))
acc_logreg <- mean(as.numeric(y_hat_logreg) == as.numeric(test$graduacao_stem), na.rm = TRUE)
auc_logreg <- auc(test$graduacao_stem, prob_logreg)[1]
## optimal confusion table
table(Predicted = y_hat_logreg, Observed = test$graduacao_stem)
# Classification Tree -----------------------------------------------------
ctree <- tree(graduacao_stem ~ ., data = training[, !(names(training)) %in% excluded_variables], na.action = na.exclude)
plot(ctree)
text(ctree)
prob_ctree <- predict(ctree, newdata = test, type = "vector")[, 2]
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data"
output_dir                = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/gabri/OneDrive/Gabriel/Insper/Tese/Engenheiros/replication_code/rdd_when_science_strikes_back/1_create_electoral_data/output/data"
set.seed(1235) # making it reproducible
# Data --------------------------------------------------------------------
df <- readRDS(paste0(output_dir, "/data/230829_masked_ml_dataset_stem.Rds"))
df_nonstem <- readRDS(paste0(output_dir, "/data/230829_masked_ml_dataset_non_stem.Rds"))
# Removing cbo_agregado_ dummies
## Create a vector of variable names to remove
variables_to_remove <- grep("cbo_agregado_", names(df), value = TRUE)
## Remove the selected variables from the data frame
df <- df[, !(names(df) %in% variables_to_remove)]
## Creating aggregated data
df <- df %>%
mutate(cbo_2_digits = as.factor(substring(cbo_2002, 0,2)))
## Creating dummy columns for categorical variables (useful for running the algorithms)
df <- dummy_cols(df, select_columns = c("raca","id_municipio"))
## Fixing datatype
df$id_municipio <- as.factor(df$id_municipio)
## Removing candidates with missing educational background and creating copy with all candidates
df_all_candidates <- df
df <- df %>%
filter(!is.na(graduacao_stem))
# Creating Train / Test datasets ------------------------------------------------------
idx <- sample(1:nrow(df), size = round(0.7 * nrow(df)))
training <- df[idx, ] # used to train the classifier
test <- df[-idx, ] # used to apply the classifier
# Variables to not use
excluded_variables <- c("id_masked",
"resultado",
"ano",
"cbo_2002",
"id_municipio",
"instrucao",
"ocupacao",
"sigla_partido",
"state",
"cbo_agregado",
"cbo_2002",
"raca",
"cbo_2_digits",
"graduacao",
'X2_lugar',
'X3_lugar',
'n_stem_candidates',
'stem_job',
'dif_votos_3_lugar',
'dif_votos_2_lugar'
)
# Logistic Regression -----------------------------------------------------
logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,!(names(training)) %in% excluded_variables],  na.action = na.exclude) # It excludes the mentioned columns
summary(logreg)
prob_logreg <- predict(logreg, newdata = test[,!(names(test)) %in% excluded_variables], type = "response") # it now uses the trained model 'logreg' to estimate the values in the test dataset
## optimal threshold
plot.roc(test$graduacao_stem, prob_logreg,
print.thres = "best")
my_roc <- roc(test$graduacao_stem, prob_logreg)
best_threshold <- as.numeric(coords(my_roc,"best", ret = "threshold" ))
y_hat_logreg <- factor(ifelse(prob_logreg >= best_threshold, "Yes", "No"))
acc_logreg <- mean(as.numeric(y_hat_logreg) == as.numeric(test$graduacao_stem), na.rm = TRUE)
auc_logreg <- auc(test$graduacao_stem, prob_logreg)[1]
## optimal confusion table
table(Predicted = y_hat_logreg, Observed = test$graduacao_stem)
# Classification Tree -----------------------------------------------------
ctree <- tree(graduacao_stem ~ ., data = training[, !(names(training)) %in% excluded_variables], na.action = na.exclude)
plot(ctree)
text(ctree)
prob_ctree <- predict(ctree, newdata = test, type = "vector")[, 2]
## best threshold
plot.roc(test$graduacao_stem, prob_ctree,
print.thres = "best")
my_roc <- roc(test$graduacao_stem, prob_ctree)
best_threshold <- as.numeric(coords(my_roc,"best", ret = "threshold" ))
y_hat_ctree <- factor(ifelse(prob_ctree >= best_threshold, "Yes", "No"))
acc_ctree <- mean(as.numeric(y_hat_ctree) == as.numeric(test$graduacao_stem), na.rm = TRUE)
auc_ctree <- auc(test$graduacao_stem, prob_ctree, na.rm = TRUE )[1]
## best confusion table
table(Predicted = y_hat_ctree, Observed = test$graduacao_stem)
# Random Forest -----------------------------------------------------------
rf <- randomForest(graduacao_stem ~ ., data = training[, !(names(training)) %in% excluded_variables],  na.action = na.exclude)
prob_rf <- predict(rf, newdata = test[, !(names(test)) %in% excluded_variables], type = "prob")[, 2] # [. 2] is getting only the probability of being treated
## optimal threshold
plot.roc(test$graduacao_stem, prob_rf,
print.thres = "best")
my_roc <- roc(test$graduacao_stem, prob_rf)
best_threshold_rf <- as.numeric(coords(my_roc,"best", ret = "threshold" ))
y_hat_rf <- factor(ifelse(prob_rf >= best_threshold_rf, "Yes", "No"))
acc_rf <- mean(as.numeric(y_hat_rf) == (as.numeric(test$graduacao_stem)), na.rm = TRUE)
auc_rf <- auc(test$graduacao_stem, prob_rf)[1]
## optimal confusion table
table(Predicted = y_hat_rf, Observed = test$graduacao_stem)
# Boosting ----------------------------------------------------------------
boosting <- adaboost(graduacao_stem ~ ., data = training[, !(names(training)) %in% excluded_variables], nIter = 200,  na.action = na.exclude)
prob_boosting <- predict(boosting, newdata = test[, !(names(test)) %in% excluded_variables])$prob[, 2]
## optimal threshold
plot.roc(test$graduacao_stem, prob_boosting,
print.thres = "best")
my_roc <- roc(test$graduacao_stem, prob_boosting)
best_threshold_boosting <- as.numeric(coords(my_roc,"best", ret = "threshold" ))
y_hat_boosting <- factor(ifelse(prob_boosting >= best_threshold_boosting, "Yes", "No"))
acc_boosting <- mean(as.numeric(y_hat_boosting) == as.numeric(test$graduacao_stem), na.rm = TRUE)
auc_boosting <- auc(test$graduacao_stem, prob_boosting)[1]
## optimal confusion table
table(Predicted = y_hat_boosting, Observed = test$graduacao_stem)
# Curva ROC ---------------------------------------------------------------
plot.roc(test$graduacao_stem, prob_ctree,
col = 1, grid = TRUE,
xlab = "FPR (1 -  Specificity)",
ylab = "TPR (Sensitivity)",
main = "ROC", legacy.axes = TRUE,
asp = FALSE, las = 1)
plot.roc(test$graduacao_stem, prob_rf, col = 2, add = TRUE)
plot.roc(test$graduacao_stem, prob_boosting, col = 3, add = TRUE)
plot.roc(test$graduacao_stem, prob_logreg, col = 4, add = TRUE)
legend("bottomright",
legend = c("Tree", "Random Forest", "Boosting", "Log Reg"),
col = c(1, 2, 3, 4), lwd = 2, cex = 0.6, pch = 10)
# Using best model to predict education of candidates that we didn't find educational data ----------------------------------------------
prob_final <- predict(boosting, newdata = df_all_candidates[, !(names(df_all_candidates)) %in% excluded_variables])$prob[, 2]
y_hat_final <- factor(ifelse(prob_final >= best_threshold_boosting, "Yes", "No"))
df_all_candidates$previsao <- factor(ifelse(prob_final >= best_threshold_boosting, "Yes", "No"))
table(Predicted = y_hat_final, Observed = df_all_candidates$graduacao_stem)
df <- df_all_candidates
# Sums stats
df %>%
filter(ocupacao == "engenheiro") %>%
summarise(id_masked, ocupacao,graduacao_stem, previsao, state) %>%
arrange(ocupacao,graduacao_stem, previsao)
df %>%
filter(ocupacao == "engenheiro") %>%
summarise(id_masked, ocupacao,graduacao_stem, previsao, state) %>%
arrange(ocupacao,graduacao_stem, previsao)
summary(logreg)
summary(logreg)
summary(logreg)
