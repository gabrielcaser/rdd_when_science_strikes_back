df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
df <- df %>%  # dropping non-merged
filter(!is.na(sigla_partido))
df %>%
rename(state = sigla_uf)
# Treating data  -----------------------------------------
## changing data types
df$cpf <- as.character(df$cpf)
df$sigla_uf <- as.factor(df$sigla_uf)
df$sigla_partido <- as.factor(df$sigla_partido)
df$instrucao <- as.factor(df$instrucao)
df$cbo_2002 <- as.factor(df$cbo_2002)
df$graduacao <- as.factor(df$graduacao)
df$ocupacao <- as.factor(df$ocupacao)
View(df)
skim(df)
skim(df)
df$graduacao_stem <- as.factor(df$graduacao_stem)
df <- df %>%
replace_with_na(replace = list(graduacao_stem = c("?","-")))
unique(df$graduacao_stem)
View(df)
df <- df %>%
mutate(cbo_agregado = as.factor(substring(cbo_2002, 0,4)))
unique(df$graduacao_stem)
unique(df$state)
View(df)
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# Preencher leading 0
# Pegar base que preenchi na mão de novo colocando já outras caracteristicas dos prefeitos
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
# Treating data  -----------------------------------------
df <- df %>%  # dropping non-merged
filter(!is.na(sigla_partido))
df <- df %>%  # renaming
rename(state = sigla_uf)
## declaring as missing the education variable for candidates that we didn't found
df <- df %>%
replace_with_na(replace = list(graduacao_stem = c("?","-")))
## changing data types
df$cpf <- as.character(df$cpf)
df$state <- as.factor(df$state)
df$sigla_partido <- as.factor(df$sigla_partido)
df$instrucao <- as.factor(df$instrucao)
df$cbo_2002 <- as.factor(df$cbo_2002)
df$graduacao <- as.factor(df$graduacao)
df$ocupacao <- as.factor(df$ocupacao)
df$graduacao_stem <- as.factor(df$graduacao_stem)
## creating agreggate data for occupations
df <- df %>%
mutate(cbo_agregado = as.factor(substring(cbo_2002, 0,4)))
unique(df$state)
unique(df$graduacao_stem)
View(df)
df <- dummy_cols(df, select_columns = c("instrucao","ocupacao","sigla_partido","state", "cbo_agregado", "cbo_2002"))
View(df)
df <- clean_names(df)
View(df)
sum(colSums(is.na(df)))
idx <- sample(1:nrow(df), size = round(0.7 * nrow(df)))
training <- df[idx, ]
View(training)
rm(df_education, df_electoral)
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# OK Preencher leading 0
# Não precisou - Pegar base que preenchi na mão de novo colocando já outras caracteristicas dos prefeitos
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
# Treating data  -----------------------------------------
df <- df %>%  # dropping non-merged
filter(!is.na(sigla_partido))
df <- df %>%  # renaming
rename(state = sigla_uf)
## declaring as missing the education variable for candidates that we didn't found
df <- df %>%
replace_with_na(replace = list(graduacao_stem = c("?","-")))
## changing data types
df$cpf <- as.character(df$cpf)
df$state <- as.factor(df$state)
df$sigla_partido <- as.factor(df$sigla_partido)
df$instrucao <- as.factor(df$instrucao)
df$cbo_2002 <- as.factor(df$cbo_2002)
df$graduacao <- as.factor(df$graduacao)
df$ocupacao <- as.factor(df$ocupacao)
df$graduacao_stem <- as.factor(df$graduacao_stem)
## creating agreggate data for occupations
df <- df %>%
mutate(cbo_agregado = as.factor(substring(cbo_2002, 0,4)))
# tentando criar dummies
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = cbo_2002, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = state, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = instrucao, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = city, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = sigla_partido, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = ocupacao, value = dummy, fill = 0)
#
#df <- df %>%
#  mutate(dummy = 1) %>%
#  spread(key = ocupacao, value = dummy, fill = 0)
## Creating dummy columns for categorical variables (useful for running the algorithms)
df <- dummy_cols(df, select_columns = c("instrucao","ocupacao","sigla_partido","state", "cbo_agregado", "cbo_2002"))
df <- clean_names(df) # cleaning variable names so there are no duplicates
## Removing datasets, candidates with missing educational background and creating copy with all candidates
rm(df_education, df_electoral)
df_all_candidates <- df
df <- df %>%
filter(!is.na(graduacao_stem))
idx <- sample(1:nrow(df), size = round(0.7 * nrow(df)))
training <- df[idx, ]
test <- df[-idx, ]
View(test)
rm(df)
View(training)
skim(training)
logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,-c("cpf", "nome", "resultado", "ano", "cbo_2002")],  na.action = na.exclude)
logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,!(names(training)) %in% c("cpf", "nome", "resultado", "ano", "cbo_2002")],  na.action = na.exclude)
View(logreg)
#logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,-c(4,5,6,7,10,11,12,15)],  na.action = na.exclude)
summary(logreg)
#logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,-c(4,5,6,7,10,11,12,15)],  na.action = na.exclude)
summary(logreg)
#logreg <- glm(as.numeric(graduacao_stem) ~ . , data = training[,-c(4,5,6,7,10,11,12,15)],  na.action = na.exclude)
summary(logreg)
prob_logreg <- predict(logreg, newdata = training[,!(names(training)) %in% c("cpf", "nome", "resultado", "ano", "cbo_2002")], type = "response") # it now uses the trained model 'logreg' to estimate the values in the test dataset
prob_logreg <- predict(logreg, newdata = test[,!(names(test)) %in% c("cpf", "nome", "resultado", "ano", "cbo_2002")], type = "response") # it now uses the trained model 'logreg' to estimate the values in the test dataset
# Program - This program creates the dataset for the machine learning methods
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
View(df)
as.factor(df$cpf)
as.numeric(as.factor(df$cpf))
df$id_masked <- as.numeric(as.factor(df$cpf))
View(df)
df %>%
summarise("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")
df %>%
summarise(cpf, tenure, cbo_2002,
"graduacao",
"graduacao_stem",
"id_municipio",
"sigla_uf",
"cpf",
"nome",
"resultado",
"sigla_partido",
"instrucao",
"ocupacao", "genero", "raca", "idade", "ano")
df %>%
summarise(cpf,
tenure,
cbo_2002,
graduacao,
graduacao_stem,
id_municipio,
sigla_uf,
cpf,
nome,
resultado,
sigla_partido,
instrucao,
ocupacao,
genero,
raca,
idade,
ano)
df <- df %>%
summarise(id_masked,
tenure,
cbo_2002,
graduacao,
graduacao_stem,
id_municipio,
sigla_uf,
resultado,
sigla_partido,
instrucao,
ocupacao,
genero,
raca,
idade,
ano)
View(df)
# Program - This program creates the dataset for the machine learning methods
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
# Masking -----------------------------------------------------------------
df$id_masked <- as.numeric(as.factor(df$cpf))
df <- df %>%
summarise(id_masked,
tenure,
cbo_2002,
graduacao,
graduacao_stem,
id_municipio,
sigla_uf,
resultado,
sigla_partido,
instrucao,
ocupacao,
genero,
raca,
idade,
ano)
# Saving ------------------------------------------------------------------
saveRDS(df, file = paste(output_dir,"/data/masked_dataset", state, ".Rds", sep = ""))
saveRDS(df, file = paste(output_dir,"/data/masked_dataset.Rds", sep = ""))
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# OK Preencher leading 0
# Não precisou - Pegar base que preenchi na mão de novo colocando já outras caracteristicas dos prefeitos
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df <- read.csv(paste0(output_dir, "/data/masked_dataset"))
df <- readRDS(paste0(output_dir, "/data/masked_dataset.Rds"))
View(df)
df$id_masked <- str_pad(df_education$cpf, 11, pad = "0")
df$id_masked <- str_pad(df$id_masked, 11, pad = "0")
View(df)
glimpse(df)
# Program - This program creates the dataset for the machine learning methods
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
# Masking -----------------------------------------------------------------
df$id_masked <- as.numeric(as.factor(df$cpf))
## completing IDs with leading 0 until they achieve 11 characters
df$id_masked <- str_pad(df$id_masked, 11, pad = "0")
# Treating data  -----------------------------------------
df <- df %>%
summarise(id_masked,
tenure,
cbo_2002,
graduacao,
graduacao_stem,
id_municipio,
sigla_uf,
resultado,
sigla_partido,
instrucao,
ocupacao,
genero,
raca,
idade,
ano)
df <- df %>%  # dropping non-merged
filter(!is.na(sigla_partido))
df <- df %>%  # renaming
rename(state = sigla_uf)
## declaring as missing the education variable for candidates that we didn't found
df <- df %>%
replace_with_na(replace = list(graduacao_stem = c("?","-")))
## changing data types
df$cpf <- as.character(df$cpf)
# Program - This program creates the dataset for the machine learning methods
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
## hand coded data
df_education <- read.csv(paste0(work_dir, "/input/230216_stem_eleitos_formacao.csv"), nrows = 302)[ , c("cpf", "tenure", "cbo_2002", "graduacao", "graduacao_stem")] # This dataset was created manually. We searched for mayors' undergraduate degree on municipalities' website, social media and specialized websites (Escavador.com.br)
### completing IDs with leading 0 until they achieve 11 characters
df_education$cpf <- str_pad(df_education$cpf, 11, pad = "0")
## electoral data
df_electoral <- read.csv(paste0(create_electoral_data_dir, "/df_candidatos_2020_clean.csv"), sep = ";")[ , c("id_municipio", "sigla_uf", "cpf", "nome", "resultado", "sigla_partido", "instrucao", "ocupacao", "genero", "raca", "idade", "ano")]
### completing IDs with leading 0 until they achieve 11 characters
df_electoral$cpf <- str_pad(df_electoral$cpf, 11, pad = "0")
## Merging with electoral data
df <- left_join(df_education, df_electoral, by = 'cpf') # 5 are not merging
# Masking -----------------------------------------------------------------
df$id_masked <- as.numeric(as.factor(df$cpf))
## completing IDs with leading 0 until they achieve 11 characters
df$id_masked <- str_pad(df$id_masked, 11, pad = "0")
# Treating data  -----------------------------------------
df <- df %>%
summarise(id_masked,
tenure,
cbo_2002,
graduacao,
graduacao_stem,
id_municipio,
sigla_uf,
resultado,
sigla_partido,
instrucao,
ocupacao,
genero,
raca,
idade,
ano)
df <- df %>%  # dropping non-merged
filter(!is.na(sigla_partido))
df <- df %>%  # renaming
rename(state = sigla_uf)
## declaring as missing the education variable for candidates that we didn't found
df <- df %>%
replace_with_na(replace = list(graduacao_stem = c("?","-")))
## changing data types
df$state <- as.factor(df$state)
df$sigla_partido <- as.factor(df$sigla_partido)
df$instrucao <- as.factor(df$instrucao)
df$cbo_2002 <- as.factor(df$cbo_2002)
df$graduacao <- as.factor(df$graduacao)
df$ocupacao <- as.factor(df$ocupacao)
df$graduacao_stem <- as.factor(df$graduacao_stem)
## creating agreggate data for occupations
df <- df %>%
mutate(cbo_agregado = as.factor(substring(cbo_2002, 0,4)))
## Creating dummy columns for categorical variables (useful for running the algorithms)
df <- dummy_cols(df, select_columns = c("instrucao","ocupacao","sigla_partido","state", "cbo_agregado", "cbo_2002"))
df <- clean_names(df) # cleaning variable names so there are no duplicates
# Saving ------------------------------------------------------------------
saveRDS(df, file = paste(output_dir,"/data/masked_ml_dataset.Rds", sep = ""))
View(df)
# Program - This program uses machine learning to classify mayors educational background as STEM or Non-STEM
# TO DO -------------------------------------------------------------------
# OK Preencher leading 0
# Não precisou - Pegar base que preenchi na mão de novo colocando já outras caracteristicas dos prefeitos
# Libs --------------------------------------------------------------------
library(skimr)
library(pROC)
library(tree)
library(randomForest)
library(fastAdaboost)
library(naniar)
library(fastDummies)
library(tidyverse)
library(janitor)
## Directories
work_dir                  = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data"
output_dir                = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/3_create_education_data/output"
create_electoral_data_dir = "C:/Users/GabrielCaserDosPasso/Documents/RAIS/1_create_electoral_data/output/data"
set.seed(1234) # making it reproducible
# Data --------------------------------------------------------------------
df <- readRDS(paste0(output_dir, "/data/masked_ml_dataset.Rds"))
## Removing candidates with missing educational background and creating copy with all candidates
df_all_candidates <- df
df <- df %>%
filter(!is.na(graduacao_stem))
idx <- sample(1:nrow(df), size = round(0.7 * nrow(df)))
training <- df[idx, ] # used to train the classifier
test <- df[-idx, ] # used to apply the classifier
